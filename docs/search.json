[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Project Links"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "New Home Page",
    "section": "",
    "text": "{\n  // First, ensure the ml5 library is available in this context\n  const ml5 = await require('https://unpkg.com/ml5@latest/dist/ml5.min.js');\n\n  // Create a file input element for image upload\n  const fileInput = html`&lt;input type=\"file\" accept=\"image/*\"/&gt;`;\n  \n  // Create an image element to display the uploaded image\n  const img = html`&lt;img id=\"image\" style=\"max-width: 100%; margin-top: 10px;\"/&gt;`;\n  \n  // Create a paragraph element to display the filename\n//   const filenameDisplay = html`&lt;p&gt;Results: None&lt;/p&gt;`;\n\n  const resultDisplay = html`&lt;div id=\"result\"&gt;Upload an image to classify it.&lt;/div&gt;`;\n  \n//   // Function to handle file selection and update the display\n//   fileInput.onchange = (e) =&gt; {\n//     const file = e.target.files[0];\n    \n//     // Function to run when results arrive\n//     function gotResult(error, results) {\n//         const element = document.getElementById(\"result\");\n//         if (error) {\n//             element.innerHTML = error;\n//         } else {\n//             let num = results[0].confidence * 100;\n//             element.innerHTML = results[0].label + \"&lt;br&gt;Confidence: \" + num.toFixed(2) + \"%\";\n//         }\n//     }\n\n//     if (file) {\n//       // Update the image source to display the selected image\n//       img.src = URL.createObjectURL(file);\n\n//       // Update the text to display the filename\n//       resultDisplay.textContent = `Scanning ...`;\n\n//       // Initialize Image Classifier with MobileNet.\n//       const classifier =  ml5.imageClassifier('MobileNet');\n//       classifier.classify(document.getElementById(\"image\"), gotResult);\n      \n//     }\n//   };\n\n  // Function to handle file selection and update the display\n  fileInput.onchange = async (e) =&gt; {\n    const file = e.target.files[0];\n    if (file) {\n      img.src = URL.createObjectURL(file);\n      img.onload = () =&gt; { // Ensure the image is loaded before classification\n        img.style.display = 'block'; // Show the image\n\n        // Initialize Image Classifier with MobileNet and classify the image\n        ml5.imageClassifier('MobileNet').then(classifier =&gt; {\n          classifier.classify(img, (error, results) =&gt; {\n            if (error) {\n              resultDisplay.textContent = `Error: ${error}`;\n              console.error(error);\n            } else {\n              let confidence = results[0].confidence * 100;\n              resultDisplay.innerHTML = `${results[0].label}&lt;br&gt;Confidence: ${confidence.toFixed(2)}%`;\n            }\n          });\n        });\n      };\n      \n      // Reset the result display for the new image\n      resultDisplay.textContent = `Scanning ...`;\n    }\n  };\n  \n  // Return a div that contains the file input, image, and filename display\n  return html`&lt;div&gt;${fileInput}${img}${resultDisplay}&lt;/div&gt;`;\n}\n\n\n\n\n\n\n\nP5 = require(\"p5\")\n\n\n\n\n\n\nCredit: Danielle Navarro\n\nfunction* createSketch(sketch) {\n  const element = DOM.element('div');\n  yield element;\n  const instance = new P5(sketch, element, true);\n  try {\n    while (true) {\n      yield element;\n    }\n  } finally {\n    instance.remove();\n  }\n}\n\ncreateSketch(s =&gt; {\n  // Use `s.` to access p5 functions within instance mode\n  s.setup = function() {\n    s.createCanvas(720, 400);\n  };\n\n  let t = 0;\n  s.draw = function() {\n    s.background('#fff');\n    s.translate(s.width / 2, s.height / 2);\n    s.stroke('#0f0f0f');\n    s.strokeWeight(1.5);\n    // Loop for adding 100 lines\n    for (let i = 0; i &lt; 100; i++) {\n      s.line(x1(t + i), y1(t + i), x2(t + i) + 20, y2(t + i) + 20);\n    }\n    t += 0.15;\n  };\n\n  // Update these functions to use `s.sin` and `s.cos`\n  function x1(t) {\n    return s.sin(t / 10) * 125 + s.sin(t / 20) * 125 + s.sin(t / 30) * 125;\n  }\n\n  function y1(t) {\n    return s.cos(t / 10) * 125 + s.cos(t / 20) * 125 + s.cos(t / 30) * 125;\n  }\n\n  function x2(t) {\n    return s.sin(t / 15) * 125 + s.sin(t / 25) * 125 + s.sin(t / 35) * 125;\n  }\n\n  function y2(t) {\n    return s.cos(t / 15) * 125 + s.cos(t / 25) * 125 + s.cos(t / 35) * 125;\n  }\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport plotly.graph_objects as go\nimport pandas as pd\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\n\nfig = go.Figure(data=[go.Surface(z=z_data.values)])\n\nfig.update_layout(title='Mt Bruno Elevation', autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\n\nfig.show()"
  }
]